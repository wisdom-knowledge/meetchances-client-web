---
alwaysApply: true
description: "项目全局编码规范和指导性原则"
---

# 项目编码规范和指导性原则

## 项目基本信息

### 技术选型
- **前端框架**: React 19 + TypeScript 5.8
- **构建工具**: Vite 7.0 + SWC
- **路由管理**: TanStack Router (文件系统路由)
- **UI 组件库**: Shadcn/ui (基于 Radix UI + Tailwind CSS 4.1)
- **状态管理**: TanStack Query (服务端状态) + Zustand (客户端状态)
- **表单处理**: React Hook Form + Zod 验证
- **身份验证**: Clerk
- **图标库**: Tabler Icons + Lucide React
- **样式方案**: Tailwind CSS + CSS Variables
- **代码规范**: ESLint + Prettier + TypeScript ESLint

### 项目结构说明
这是基于 [shadcn-admin](https://github.com/satnaing/shadcn-admin) 的 fork 项目。

## 目录结构规范

### 核心目录结构
```
src/
├── components/          # 共享组件
│   ├── ui/             # shadcn/ui 基础组件 (不要修改)
│   └── layout/         # 布局相关组件
├── features/           # 功能模块 (按业务划分)
├── routes/             # 路由定义 (TanStack Router)
├── hooks/              # 自定义 Hooks
├── lib/                # 工具函数
├── stores/             # 状态管理
├── assets/             # 静态资源
└── utils/              # 业务工具函数
```

### 新增页面/路由的流程
1. 在 `src/routes/` 目录下创建路由文件 (遵循 TanStack Router 文件系统路由规范)
2. 在 `src/features/` 目录下创建对应的功能模块
3. 如需侧边栏菜单，更新 `src/components/layout/data/sidebar-data.ts`
4. 路由守卫通过 `_authenticated` 路由实现

## 编码规范

### TypeScript 规范
- **强制使用 TypeScript**，禁止 `any` 类型
- 优先使用 `interface` 定义对象类型，`type` 用于联合类型
- 使用 `@/` 别名引用 src 目录下的文件
- 组件 Props 必须定义 TypeScript 接口

### React 组件规范
- **函数组件优先**，使用 `export default function ComponentName()`
- 组件名使用 PascalCase，文件名使用 kebab-case
- 使用 React 19 的新特性（如 React Compiler 兼容写法）
- 优先使用 Hooks，避免不必要的 useEffect

### 路由规范 (TanStack Router)
- 路由文件名决定 URL 路径
- 受保护的路由放在 `_authenticated/` 目录下
- 路由组件使用 `createFileRoute` 定义
- 错误页面统一放在 `(errors)/` 目录

### 组件和样式规范
- **必须使用 Tailwind CSS**，避免内联样式和 CSS 模块
- 使用 `cn()` 工具函数合并类名（来自 [lib/utils.ts](mdc:src/lib/utils.ts)）
- 响应式设计优先：`sm:` `md:` `lg:` `xl:`
- 颜色使用 CSS 变量系统，支持明暗主题切换
- 优先使用 shadcn/ui 组件，自定义组件放在 `components/` 目录

### 状态管理规范
- **服务端状态**: 使用 TanStack Query (`@tanstack/react-query`)
- **客户端状态**: 使用 Zustand (简单状态) 或 React 内置状态
- 避免 Redux，除非有复杂的状态逻辑需求

### 表单处理规范
- 使用 React Hook Form + Zod 进行表单验证
- 表单组件统一使用 shadcn/ui 的 Form 组件
- 验证 schema 定义在对应 feature 的 `data/schema.ts` 文件中

### 数据获取和 API 规范
- 使用 TanStack Query 进行数据获取
- API 调用使用 axios，配置在 `lib/` 目录下
- 错误处理统一使用 `utils/handle-server-error.ts`

#### API 文档（Swagger/OpenAPI）
- 如需查询接口的请求/响应结构，请优先使用后端 Swagger 文档：
  - `https://service-dev.meetchances.com/api/v1/openapi.json`
- 可以结合 MCP 工具或脚本读取该地址以保持前后端契约一致。

### 图标使用规范
- 优先使用 Tabler Icons (`@tabler/icons-react`)
- 次选 Lucide React 图标库
- 图标大小统一使用 Tailwind 类名：`h-4 w-4` `h-5 w-5` 等

## 代码质量规范

### ESLint 规则
- 禁止使用 `console.log`，生产环境使用 `console.error`
- 未使用的变量必须以 `_` 开头
- React Hooks 规则严格执行
- TypeScript 类型检查严格模式

### 导入规范
- 使用绝对路径 `@/` 引用项目文件
- 第三方库导入放在顶部
- 项目内导入使用相对路径或别名
- 使用 Prettier 自动排序导入

### 命名规范
- **组件**: PascalCase (`UserProfile`)
- **文件名**: kebab-case (`user-profile.tsx`)
- **变量/函数**: camelCase (`getUserData`)
- **常量**: UPPER_SNAKE_CASE (`API_BASE_URL`)
- **类型/接口**: PascalCase (`UserData`, `ApiResponse`)

## 性能优化指导

### React 性能
- 合理使用 `React.memo`、`useMemo`、`useCallback`
- 避免在渲染函数中创建对象和函数
- 大型列表使用虚拟化 (`@tanstack/react-table`)

### 打包优化
- 路由级别的代码分割已启用 (`autoCodeSplitting: true`)
- 懒加载非关键组件
- 图片资源放在 `public/images/` 目录

## 开发工作流

### 开发环境
- 项目启动: `pnpm dev` (监听 http://localhost:5173/)
- **避免启动额外端口**，使用默认的 5173 端口
- 开发工具: React Query Devtools + TanStack Router Devtools

### 代码提交规范
- 使用 Conventional Commits 规范
- 提交前自动运行 ESLint 和 Prettier
- 大型功能开发建议使用 feature branch

### 测试规范
- 优先编写集成测试
- 组件测试使用 React Testing Library
- 工具函数必须有单元测试

## 文档规范

### 代码注释
- 复杂业务逻辑必须添加注释
- 组件 Props 使用 JSDoc 注释
- API 接口添加类型注释

### 文档输出
- 总结性文档输出到 `/docs` 目录
- 避免频繁创建文档文件
- 使用 Markdown 格式，配合 Mermaid 图表

## 安全规范

### 身份验证
- 使用 Clerk 进行用户认证
- 受保护路由通过 `_authenticated` 布局实现
- 敏感信息使用环境变量管理

### 数据验证
- 前端表单使用 Zod 验证
- API 响应数据进行类型检查
- 用户输入必须进行 XSS 防护

## 部署和环境

### 环境配置
- 开发环境配置在 `.env.local`
- 生产环境配置通过 CI/CD 注入
- 使用 Netlify 进行静态部署

### 构建优化
- TypeScript 类型检查在构建时执行
- Vite 生产构建自动优化
- 支持 Modern JavaScript 特性

## 常见问题解决

### 开发问题
- 热重载问题: 检查 Vite 配置和端口占用
- TypeScript 错误: 确保 `@/` 路径别名配置正确
- 组件不渲染: 检查 TanStack Router 路由配置

### 性能问题
- 首屏加载慢: 检查代码分割和懒加载
- 运行时性能: 使用 React Profiler 分析
- 构建速度: 优化 ESLint 和 TypeScript 配置

---

这些规范旨在确保代码质量、项目一致性和开发效率。遵循这些规范将帮助团队协作更加顺畅。